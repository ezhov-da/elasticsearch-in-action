# Иногда нам нужно найти последовательность слов точно в заданном
# порядке, например, найти все книги, в поле синопсиса 
# которых есть фраза «обязательная книга для каждого программиста Java». 
# Для этой цели мы можем написать запрос match_phrase.

POST {{baseUrl}}/books/_search
Authorization: {{auth}}
content-type: application/json

{
    "query": { 
        "match_phrase": { 
            "synopsis": "must-have book for every Java programmer"
            } 
        } 
}

###

# Давайте посмотрим, как выделить часть текста в 
# возвращенном документе, которая соответствует нашему
# исходному запросу. Например, когда мы ищем 
# слово или фразу на сайте блога, сайт 
# обычно показывает соответствующий текст с 
# каким-то выделением с использованием цветов или теней.
# На рисунке показано выделение в действии: 
# мы ищем «совпадение фразы» на сайте документации
# Elasticsearch. (Подсветка)

# Окончательный результат выглядит примерно так: 
# совпадения, выделенные тегом HTML-разметки (em), 
# указывают на выделенные слова.

# Мы можем положиться на match_phrase для точного 
# поиска фраз. Но что произойдет, если мы уберем 
# одно или два слова фразы? Например, сработает 
# ли запрос, если мы попросим его выполнить поиск 
# по запросу «must-have book Java programmer» 
# (отбросив слова for и every)? 
# Запрос не даст результатов, если вы перезапустите 
# его после удаления этих двух слов. К счастью, 
# мы можем вежливо попросить Elasticsearch, 
# установив параметр slop в запросе match_phrase. 
# Это обсуждается в следующем разделе.

POST {{baseUrl}}/books/_search
Authorization: {{auth}}
content-type: application/json

{
    "query": { 
        "match_phrase": { 
            "synopsis": "must-have book for every Java programmer"
            } 
        },
    "highlight": { 
        "fields": { 
            "synopsis": {} 
        } 
    }
}