# Мы можем контролировать обновлением индекса со стороны клиента.
# Для CRUD операций.
# Используется параметр `refresh`.

# Три значения:
# - refresh=false
# Сообщает движку не принудительно запускать операцию 
# обновления, а вместо этого применить настройку по умолчанию 
# (одна секунда). Движок делает документ доступным для 
# поиска только после предопределенного интервала обновления. 
# Мы также не можем предоставить параметр запроса, который 

# - refresh=true (or empty string)
# Запускает операцию обновления, чтобы документ был виден 
# для поиска немедленно. Если наш интервал обновления 
# установлен на 60 секунд и мы индексируем 1000 документов 
# с refresh=true, все 1000 документов должны быть доступны 
# для поиска мгновенно, а не ждать 60-секундного интервала
# - refresh=wait_for
# Блокирующий запрос, который заставляет клиента ждать, 
# пока операция обновления не запустится и не завершится, 
# прежде чем запрос будет возвращен. Например, если наш 
# интервал обновления составляет 60 секунд, запрос блокируется 
# на 60 секунд, пока обновление не будет выполнено. Однако 
# его можно запустить вручную, вызвав конечную точку 



# Удаление индексов --------------------------
### 
DELETE {{baseUrl}}/123
Authorization: {{auth}}
content-type: application/json
# --------------------------------------------

###
# Рекомендуем движку начать обновление после индексации 
# документа, а не ждать истечения интервала обновления.
PUT {{baseUrl}}/123/_doc/1?refresh
Authorization: {{auth}}
content-type: application/json

{
    "index":{
        "refresh_interval":"60s"
    }
}

### 
GET {{baseUrl}}/123/_settings
Authorization: {{auth}}
content-type: application/json

### 
POST {{baseUrl}}/123/_doc
Authorization: {{auth}}
content-type: application/json

{
    "title":"Elasticsearch in Action"
}


###
# Обновление индекса
POST {{baseUrl}}/123/_refresh
Authorization: {{auth}}
content-type: application/json


### 
POST {{baseUrl}}/123/_search
Authorization: {{auth}}
content-type: application/json